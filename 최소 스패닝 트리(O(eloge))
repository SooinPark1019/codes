#include <bits/stdc++.h>

using namespace std;

class UnionFind{
private:
    vector<int> p, rank, setSize;
public:
    UnionFind(int N){
        p.assign(N, 0);
        for(int i=0; i<N; i++) p[i]=i;
        rank.assign(N, 0);
        setSize.assign(N, 1);
    };
    int findset(int i){
        return(p[i]==i) ? i : (p[i]=findset(p[i]));
    }
    bool isSameSet(int i, int j){
    return findset(i) == findset(j);
    }
    int SizeOfSet(int i){
        return setSize[findset(i)];
    }
    void UnionSet(int i, int j){
    if(isSameSet(i, j)) return;
    int x=findset(i);
    int y=findset(j);
    if(rank[x]>rank[y]) swap(y,x);
    p[x] = y;
    if(rank[x]==rank[y]) rank[y]++;
    setSize[y]+=setSize[x];
    }
};


int main(){
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> PQ;
    int V, E;
    cin >> V >> E;
    UnionFind UF(V+1);
    for(int i=0; i<E; i++){
        int a, b, c;
        cin >> a >> b >> c;
        PQ.push(make_pair(c, make_pair(a, b)));
    }
    int ans=0;
    while(!PQ.empty()){
        int cost=PQ.top().first;
        int a=PQ.top().second.first;
        int b=PQ.top().second.second;
        PQ.pop();
        if(UF.isSameSet(a, b))continue;
        ans+=cost;
        UF.UnionSet(a, b);
    }
    cout << ans;
    return 0;
}
