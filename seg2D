class Seg2D{
public:
  int n;
  vector<vector<int>> a;
  Seg2D(int n) : n(n), a(2*n,vector<int>(2*n)){}
  // n*n인 2차원 vector를 인자로 보내야 함
  void init(vector<vector<int>>& val){
    for(int i = 0; i < n; i++){
      for(int j = 0; j < n; j++)
        a[i+n][j+n] = val[i][j];
    }
    // 바깥 Segment Tree의 leaf node인 Segment들에 대한 처리
    for(int i = n; i < 2*n; i++){
      for(int j = n-1; j > 0; j--) a[i][j] = a[i][j<<1]+a[i][j<<1|1];
    }
    // 바깥 Segment Tree의 leaf node가 아닌 Segment들에 대한 처리
    for(int i = n-1; i > 0; i--){
      for(int j = 1; j < 2*n; j++){
        a[i][j] = a[i<<1][j] + a[i<<1|1][j];
      }
    }
  }
  // (x, y)의 값을 val로 변경
  void upd(int x, int y, int val) {
    a[x+n][y+n] = val;
    // 바깥 Segment Tree의 leaf에 대한 처리
    for(int i = y+n; i > 1; i >>= 1)  a[x+n][i>>1] = a[x+n][i] + a[x+n][i^1];
    // 바깥 Segment Tree의 leaf node가 아닌 Segment들에 대한 처리    
    for(x = x+n; x > 1; x >>= 1){
      for(int i = y+n; i >= 1; i >>= 1){
        a[x>>1][i] = a[x][i]+a[x^1][i];        
      }
    }
  }
  int query1D(int x, int y1, int y2){
    int ret = 0;
    for(y1 += n, y2 += n+1; y1 < y2; y1 >>= 1, y2 >>= 1){
      if(y1 & 1) ret += a[x][y1++];
      if(y2 & 1) ret += a[x][--y2];
    }    
    return ret;
  }
  // sum of l-th to r-th element(0-indexed)
  int query(int x1, int y1, int x2, int y2) {
    int ret = 0;
    for(x1 += n, x2 += n+1; x1 < x2; x1 >>= 1, x2 >>= 1){
      if(x1&1) ret += query1D(x1++, y1, y2);
      if(x2&1) ret += query1D(--x2, y1, y2);
    }
    return ret;
  }  
};
