#include <bits/stdc++.h>

using namespace std;
const int MAX=10005;
int V, E;
int id=0;
int d[MAX];
int finished[MAX];
vector<int> graph[MAX];
int Sccnum=0;
int sn[MAX];
stack<int> S;
vector<vector<int>> ans;

int DFS(int node){
    d[node]=++id;
    S.push(node);

    int result=d[node];
    for(auto i : graph[node]){
        if(d[i]==0) result=min(result, DFS(i));
        else if(finished[i]==0) result=min(result, d[i]);
    }
    if(result==d[node]){
        vector<int> scc;
        while(1){
            int temp=S.top();
            S.pop();
            scc.push_back(temp);
            finished[temp]=1;
            sn[temp]=Sccnum;
            if(temp==node) break;
        }
        sort(scc.begin(), scc.end());
        ans.push_back(scc);
        Sccnum++;
    }
    return result;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> V >> E;
    for(int i=0; i<E; i++){
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
    }
    for(int i=1; i<=V; i++){
        if(d[i]==0) DFS(i);
    }
    cout << Sccnum << "\n";
    sort(ans.begin(), ans.end());
    for(auto v : ans){
        for(auto i : v){
            cout << i << " ";
        }
        cout << -1 << "\n";
    }
    return 0;
}
