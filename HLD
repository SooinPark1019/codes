vector<ll> V(MAXN, 0);
vector<int> graph[MAXN];
ll sz[MAXN], dep[MAXN], top[MAXN], par[MAXN], in[MAXN], out[MAXN];
vector<int> child[MAXN];
int pv=0, N;

struct Seg{
    vector<ll> seg;
    void init(){
        seg.resize(4*N+4);
    }
    void update_seg(int node, int start, int end, int index, long long diff){
        //cout << node << " " << start << " " << end << " " << index << " " << diff << endl;
        if(index<start||index>end) return;
        if(start==end) seg[node]=diff;
        else{
            int mid=(start+end)/2;
            update_seg(node*2, start, mid, index, diff);
            update_seg(node*2+1, mid+1, end, index, diff);
            seg[node]=seg[node*2]+seg[node*2+1];
        }
        return;
    }
    long long sum_seg(int node, int start, int end, int left, int right){
        //cout << node << " " << start << " " << end << " " << left << " " << right << "\n";
        if(left>right) return 0;
        if(left>end||right<start) return 0;
        if(left<=start&&end<=right) return seg[node];
        int mid=(start+end)/2;
        return sum_seg(node*2, start, mid, left, right)+sum_seg(node*2+1, mid+1, end, left, right);
    }
};

Seg seg;

void dfs1(int cur_node, int p){
    chk[cur_node]=1;
    //cout << cur_node << "\n";
    for(auto i : graph[cur_node]){
        if(i==p) continue;
        par[i]=cur_node;
        child[cur_node].push_back(i);
        dfs1(i, cur_node);
    }
}

void dfs2(int cur_node){
    chk[cur_node]=1;
    sz[cur_node]=1;
    for(auto &i : child[cur_node]){
        dep[i]=dep[cur_node]+1;
        dfs2(i);
        sz[cur_node]+=sz[i];
        if(sz[i]>sz[child[cur_node][0]]) swap(i, child[cur_node][0]);
    }
}

void dfs3(int cur_node){
    chk[cur_node]=1;
    in[cur_node]=++pv;
    for(auto i : child[cur_node]){
        if(i==child[cur_node][0]) top[i]=top[cur_node];
        else top[i]=i;
        dfs3(i);
    }
    out[cur_node]=pv;
}

void update(int node, int val){
    //cout << in[node] << " " << val << "\n";
    seg.update_seg(1, 0, N, in[node], val);
}

ll query(int a, int b){
    //cout << a << " " << b << "\n";
    ll ret=0;
    while(top[a]!=top[b]){
        if(dep[top[a]]<dep[top[b]]) swap(a, b);
        int st=top[a];
        //cout << in[a] << " " << in[st] << "\n";
        ret+=seg.sum_seg(1, 0, N, in[st], in[a]);
        //cout << ret << "\n";
        a=par[st];
    }
    if(dep[a]>dep[b]) swap(a, b);
    //cout << a << " " << b << "\n";
    ret+=seg.sum_seg(1, 0, N, in[a], in[b]);
    return ret;
}
