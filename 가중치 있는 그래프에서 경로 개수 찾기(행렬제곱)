#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef __int128 i128;
long long mod=1e6+3;

struct Matrix{
	int size;
	vector< vector<ll> > arr;
	Matrix(){size = 0;}
	Matrix(int n){
		size = n;
		arr = vector< vector<ll> >(n, vector<ll>(n));
	}
	Matrix operator * (const Matrix &x){
		Matrix ret(size);
		for(int i=0; i<size; i++){
			for(int j=0; j<size; j++){
				for(int k=0; k<size; k++){
					ret.arr[i][j] += arr[i][k] * x.arr[k][j];
					ret.arr[i][j] %= mod;
				}
			}
		}
		return ret;
	}
};

Matrix powmat(Matrix a, ll b){
	if(b == 1) return a;
	Matrix ret = powmat(a, b/2);
	ret = ret * ret;
	if(b & 1) ret = ret * a;
	return ret;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, S, E, T;
    cin >> N >> S >> E >> T;
    S--;
    E--;
    Matrix adj(N*5);
    for(int i=0; i<N; i++){
        for(int j=1; j<5; j++){
            adj.arr[i*5+j][i*5+j-1]=1;
        }
    }
    for(int i=0; i<N; i++){
        string S;
        cin >> S;
        for(int j=0; j<N; j++){
            int a=S[j]-'0';
            if(a>0) adj.arr[i*5][j*5+a-1]=1;
        }
    }
    Matrix ans=powmat(adj, T);
    cout << ans.arr[S*5][E*5];
    return 0;
}

