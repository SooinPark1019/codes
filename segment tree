#include <bits/stdc++.h>

using namespace std;

int N, M, K;
vector<long long> seg;
vector<long long> V;

long long make_seg(int node, int start, int end){
    if(start==end) return seg[node]=V[start];
    long long mid=(start+end)/2;
    return seg[node]=make_seg(node*2, start, mid)+make_seg(node*2+1, mid+1, end);
}

void update_seg(int node, int start, int end, int index, long long diff){
    if(index<start||index>end) return;
    seg[node]+=diff;
    if(start!=end){
        int mid=(start+end)/2;
        update_seg(node*2, start, mid, index, diff);
        update_seg(node*2+1, mid+1, end, index, diff);
    }
    return;
}

long long sum_seg(int node, int start, int end, int left, int right){
    if(left>end||right<start) return 0;
    if(left<=start&&end<=right) return seg[node];
    int mid=(start+end)/2;
    return sum_seg(node*2, start, mid, left, right)+sum_seg(node*2+1, mid+1, end, left, right);
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N >> M >> K;
    int height=(ceil(log2(N)));
    int treesize=(1<<(height+1));
    seg.resize(treesize);
    for(long long i=0; i<N; i++){
        long long a;
        cin >> a;
        V.push_back(a);
    }
    make_seg(1, 0, N-1);
    for(int i=0; i<M+K; i++){
        int a;
        cin >> a;
        if(a==1){
            int b;
            long long c;
            cin >> b >> c;
            update_seg(1, 0, N-1, b-1, c-V[b-1]);
            V[b-1]=c;
        }
        else{
            int b;
            long long c;
            cin >> b >> c;
            cout << sum_seg(1, 0, N-1, b-1, c-1) << "\n";
        }
    }
    return 0;
}
