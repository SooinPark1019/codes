#include <bits/stdc++.h>

using namespace std;

vector<long long> seg[1025];
vector<long long> arr[1025];

long long seg_init(int nodex, int nodey, int startx, int starty, int endx, int endy){
    if(startx==endx){
        if(starty==endy){
            return seg[nodex][nodey]=arr[startx][starty];
        }
        else{
            int midy=(starty+endy)/2;
            return seg[nodex][nodey]=seg_init(nodex, nodey*2, startx, starty, endx, midy)+seg_init(nodex, nodey*2+1, startx, midy+1, endx, endy);
        }
    }
    else{
        int midx=(startx+endx)/2;
        return seg[nodex][nodey]=seg_init(nodex*2, nodey, startx, starty, midx, endy)+seg_init(nodex*2+1, nodey, midx+1, starty, endx, endy);
    }
}

long long seg_sum(int nodex, int nodey, int startx, int starty, int endx, int endy, int leftx, int lefty, int rightx, int righty){
    if(rightx<startx||endx<leftx) return 0;
    else if(leftx<=startx&&endx<=rightx){
        if(righty<starty||endy<lefty) return 0;
        else if(lefty<=starty&&endy<=righty){
            return seg[nodex][nodey];
        }
        else{
            int midy=(lefty+righty)/2;
            return seg_sum(nodex, nodey*2, startx, starty, endx, midy, leftx, lefty, rightx, righty)+seg_sum(nodex, nodey*2+1, startx, midy+1, endx, endy, leftx, lefty, rightx, righty);
        }
    }
    else{
        int midx=(leftx+rightx)/2;
        return seg_sum(nodex*2, nodey, startx, starty, midx, endy, leftx, lefty, rightx, righty)+seg_sum(nodex*2+1, nodey, midx+1, starty, endx, endy, leftx, lefty, rightx, righty);
    }
}

void seg_update(int nodex, int nodey, int startx, int starty, int endx, int endy, int indexx, int indexy, int value){
    if(indexx<startx||endx<indexx||indexy<starty||endy<)
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M;
    cin >> N >> M;
    int height=ceil(log2(N))+1;
    int segsize=1<<height;
    for(int i=1; i<=segsize; i++){
        seg[i].resize(segsize);
    }
    for(int i=0; i<N; i++){
        for(int j=0; j<N; j++){
            int a;
            cin >> a;
            arr[i].push_back(a);
        }
    }
    seg_init(1, 1, 0, 0, N-1, N-1);
    while(M--){
        int a;
        cin >> a;
        if(a==1){
            int x1, y1, x2, y2;
            cin >> x1 >> y1 >> x2 >> y2;
            cout << seg_sum(1, 1, 0, 0, N-1, N-1, x1, y1, x2, y2);
        }
        else{
            int x, y, c;
            cin >> x >> y >> c;
            c=V[x-1][y-1]-c;
            seg_update(1, 1, 0, 0, N-1, N-1, x-1, y-1, c);
        }
    }
    return 0;
}
