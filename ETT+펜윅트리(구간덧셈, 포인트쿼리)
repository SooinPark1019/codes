#include <bits/stdc++.h>

using namespace std;

int N, Q;
vector<long long> Fenwick;
vector<int> graph[100005];
int S[100005], E[100005], cnt=0;

void dfs(int x, int par){
    S[x]=++cnt;
    for(auto i : graph[x]){
        if(i==par) continue;
        dfs(i, x);
    }
    E[x]=cnt;
}

void update(int index, long long value){
    while(index<=N){
        Fenwick[index]+=value;
        index+=index&(-index);
    }
    return;
}
long long sum(int index){
    long long ret=0;
    while(index>0){
        ret+=Fenwick[index];
        index-=index&(-index);
    }
    return ret;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N >> Q;
    for(int i=1; i<=N; i++){
        int a;
        cin >> a;
        if(a==-1) continue;
        graph[a].push_back(i);
    }
    dfs(1, -1);
    Fenwick.resize(N+1);
    for(int i=0; i<Q; i++){
        int a;
        cin >> a;
        if(a==1){
            int b, c;
            cin >> b >> c;
            update(S[b], c);
            update(E[b]+1, -1*c);
        }
        else{
            int b;
            cin >> b;
            cout << sum(S[b]) << "\n";
        }
    }

    return 0;
}
