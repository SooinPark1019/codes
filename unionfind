#include <bits/stdc++.h>
#include <string>
#include <cctype>

using namespace std;

class UnionFind{
private:
    vector<int> p, rank, setSize;
public:
    UnionFind(int N){
        p.assign(N, 0);
        for(int i=0; i<N; i++) p[i]=i;
        rank.assign(N, 0);
        setSize.assign(N, 1);
    };
    int findset(int i){
        return(p[i]==i) ? i : (p[i]=findset(p[i]));
    }
    bool isSameSet(int i, int j){
    return findset(i) == findset(j);
    }
    int SizeOfSet(int i){
        return setSize[findset(i)];
    }
    void UnionSet(int i, int j){
    if(isSameSet(i, j)) return;
    int x=findset(i);
    int y=findset(j);
    if(rank[x]>rank[y]) swap(y,x);
    p[x] = y;
    if(rank[x]==rank[y]) rank[y]++;
    setSize[y]+=setSize[x];
    }
};

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n,m;
    cin >> n >> m;
    UnionFind UF(n+1);
    for(int i=0; i<m; i++){
        int a, b, c;
        cin >> a >> b >> c;
        if(a==1){
            if(UF.isSameSet(b, c)) cout << "YES" << "\n";
            else cout << "NO" << "\n";
        }
        else{
            UF.UnionSet(b ,c);
        }
    }
    return 0;
}
