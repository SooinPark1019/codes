#include <bits/stdc++.h>

using namespace std;

struct point{
    long long x,y;
};
int ccw(point A, point B, point C){
    long long temp=(B.x-A.x)*(C.y-B.y)-(C.x-B.x)*(B.y-A.y);
    if(temp>0) return 1;
    else if(temp==0) return 0;
    else return -1;
}

int cccw(point A, point B, point C, point D){
    D.x-=(C.x-B.x);
    D.y-=(C.y-B.y);
    return ccw(A, B, D);
}

point S[100005];
int stackpointer=0;
vector<point> V;

bool compare1(point A, point B){
    if(A.y==B.y) return A.x<B.x;
    return A.y<B.y;
}

long double dist(point A, point B){
    return sqrt((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));
}

bool compare2(point A, point B){
    int a=ccw(V[0], A, B);
    if(a==0)
        return dist(V[0], A)<dist(V[0], B);
    return a>0;
}


int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int T;
    cin >> T;
    while(T--){
        int N;
        cin >> N;
        V.clear();
        memset(S, 0, sizeof(S));
        stackpointer=0;
        for(int i=0; i<N; i++){
            int a, b;
            cin >> a >> b;
            V.push_back({a, b});
        }
        sort(V.begin(), V.end(), compare1);
        sort(V.begin()+1, V.end(), compare2);
        S[stackpointer]=V[0];
        stackpointer++;
        S[stackpointer]=V[1];
        stackpointer++;
        for(int i=2; i<N; i++){
            while((stackpointer>=2)&&(ccw(S[stackpointer-2], S[stackpointer-1], V[i])<=0)){
                stackpointer--;
            }
            S[stackpointer]=V[i];
            stackpointer++;
        }
        int right=1;
        long double ansdis=0;
        int ansleft;
        int ansright;
        for(int i=0; i<stackpointer; i++){
            while((right+1)!=i&&cccw(S[i], S[i+1], S[right%stackpointer], S[(right+1)%stackpointer])>0){
                if(ansdis<dist(S[i], S[right%stackpointer])){
                    ansleft=i;
                    ansright=right%stackpointer;
                    ansdis=dist(S[i], S[right%stackpointer]);
                }
                right++;
            }
            if(ansdis<dist(S[i], S[right%stackpointer])){
                ansleft=i;
                ansright=right%stackpointer;
                ansdis=dist(S[i], S[right%stackpointer]);
            }
        }
        cout << S[ansleft].x << " " << S[ansleft].y << " " << S[ansright].x << " " << S[ansright].y << "\n";
    }


    return 0;
}
