#include <bits/stdc++.h>
#define _USE_MATH_DEFINES
//#pragma GCC optimize ("O3")
//#pragma GCC optimize ("Ofast")
//#pragma GCC optimize ("unroll-loops")

using namespace std;

typedef long long ll;
typedef __int128 i128;
typedef long double ld;
const int INF = 0x3f3f3f3f;
const double EPS = 1e-9;
const ll LNF = 1e18;
const ll mod = 1e9+7;

struct line{
    ll a, b;
    long double s;
};

long double cross(line A, line B){
    return (B.b-A.b)/(A.a-B.a);
}

int main() {
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N;
    cin >> N;
    vector<ll> A;
    vector<ll> B;
    line L[100005];
    ll DP[100005]={};
    for(int i=0; i<N; i++){
        ll a;
        cin >> a;
        A.push_back(a);
    }
    for(int i=0; i<N; i++){
        ll a;
        cin >> a;
        B.push_back(a);
    }
    int vectorsize=0;
    int cur_pos=0;
    for(int i=1; i<N; i++){
        line temp={B[i-1], DP[i-1], 0};
        while(vectorsize!=0&&cross(temp, L[vectorsize-1])<=L[vectorsize-1].s){
            if(cur_pos==vectorsize)
                cur_pos--;
            vectorsize--;
        }
        if(vectorsize!=0) temp.s=cross(temp, L[vectorsize-1]);
        L[vectorsize]=temp;
        vectorsize++;
        if(cur_pos+1<vectorsize&&L[cur_pos+1].s<A[i]) cur_pos++;
        DP[i]=L[cur_pos].a*A[i]+L[cur_pos].b;
    }
    cout << DP[N-1];
    return 0;
}
