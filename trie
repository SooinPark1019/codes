#include <bits/stdc++.h>

using namespace std;

int root=1;
int unused=2;
const int MX=10000*500+5;
int check[MX]={};
int nxt[MX][30]={};

int lowercasetoint(char a){
    return a-'a';
}

void insert(string& s){
    int cur=root;
    for(int i=0; i<(int)s.length(); i++){
        if(nxt[cur][lowercasetoint(s[i])]==0){
            nxt[cur][lowercasetoint(s[i])]=unused;
            unused++;
        }
        cur=nxt[cur][lowercasetoint(s[i])];
    }
    check[cur]=1;
}

bool findstring(string& s){
    int cur=root;
    for(int i=0; i<(int)s.length(); i++){
        if(nxt[cur][lowercasetoint(s[i])]==0)
            return false;
        cur=nxt[cur][lowercasetoint(s[i])];
    }
    return check[cur];
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M;
    cin >> N >> M;

    for(int i=0; i<N; i++){
        string s;
        cin >> s;
        insert(s);
    }
    int ans=0;
    for(int i=0; i<M; i++){
        string s;
        cin >> s;
        if(findstring(s)) ans++;
    }
    cout << ans;

    return 0;
}
메모리가 부족한 경우
using namespace std;
struct TRIE {
    bool isEnd;
    vector<pair<char, TRIE*> > Child;

    TRIE() {
        isEnd = false;
        Child.clear();
    }

    void insert_Pattern(string Pattern) {
        TRIE* NowTrie = this;

        for (int i = 0; i < Pattern.size(); i++) {
            char Now = Pattern[i];

            bool Flag = false;
            for (auto A : NowTrie->Child) {
                if (A.first == Now) {
                    Flag = true;
                    NowTrie = A.second;
                    break;
                }
            }
            if (!Flag) {
                NowTrie->Child.push_back(make_pair(Now, new TRIE));
                NowTrie = NowTrie->Child.back().second;
            }
        }

        NowTrie->isEnd = true;
    }
};
출처: https://eun-jeong.tistory.com/29 [흔들리며 피는 꽃:티스토리]
