#include <bits/stdc++.h>
using namespace std;

vector<int> graph[405];
int flow[405][405]={};
int cap[405][405];
int visited[405];
int s=1;
int e=2;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, P;
    cin >> N >> P;
    for(int i=0; i<P; i++){
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
        cap[a][b]=1;
    }
    int ans=0;
    while(1){
        memset(visited, -1, sizeof(visited));
        queue<int> Q;
        Q.push(s);
        while(!Q.empty()){
            int x=Q.front();
            Q.pop();
            for(auto i : graph[x]){
                if(visited[i]!=-1||cap[x][i]<=flow[x][i]) continue;
                visited[i]=x;
                Q.push(i);
                if(i==e) break;
            }
        }
        if(visited[e]==-1) break;
        int f=987654321;
        for(int i=e; i!=s; i=visited[i]){
            f=min(f, cap[visited[i]][i]-flow[visited[i]][i]);
        }
        for(int i=e; i!=s; i=visited[i]){
            flow[visited[i]][i]+=f;
            flow[i][visited[i]]-=f;
        }
        ans+=f;
    }
    cout << ans;
    return 0;
}
